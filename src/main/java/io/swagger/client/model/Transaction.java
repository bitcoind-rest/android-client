/**
 * Bitcoind
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Transaction {
  
  @SerializedName("amount")
  private Float amount = null;
  @SerializedName("fee")
  private Float fee = null;
  @SerializedName("confirmations")
  private Long confirmations = null;
  @SerializedName("blockhash")
  private String blockhash = null;
  @SerializedName("blockindex")
  private Long blockindex = null;
  @SerializedName("blocktime")
  private Integer blocktime = null;
  @SerializedName("txid")
  private String txid = null;
  @SerializedName("txhash")
  private String txhash = null;
  @SerializedName("version")
  private Integer version = null;
  @SerializedName("size")
  private Integer size = null;
  @SerializedName("vsize")
  private Integer vsize = null;
  @SerializedName("locktime")
  private Integer locktime = null;
  @SerializedName("time")
  private Integer time = null;
  @SerializedName("timereceived")
  private Integer timereceived = null;
  public enum Bip125ReplaceableEnum {
     yes,  no,  unknown, 
  };
  @SerializedName("bip125-replaceable")
  private Bip125ReplaceableEnum bip125Replaceable = null;

  /**
   * The transaction amount in BTC
   **/
  @ApiModelProperty(value = "The transaction amount in BTC")
  public Float getAmount() {
    return amount;
  }
  public void setAmount(Float amount) {
    this.amount = amount;
  }

  /**
   * The amount of the fee in BTC. This is negative and only available for the send category of transactions.
   **/
  @ApiModelProperty(value = "The amount of the fee in BTC. This is negative and only available for the send category of transactions.")
  public Float getFee() {
    return fee;
  }
  public void setFee(Float fee) {
    this.fee = fee;
  }

  /**
   * The number of confirmations
   **/
  @ApiModelProperty(value = "The number of confirmations")
  public Long getConfirmations() {
    return confirmations;
  }
  public void setConfirmations(Long confirmations) {
    this.confirmations = confirmations;
  }

  /**
   * The block hash
   **/
  @ApiModelProperty(value = "The block hash")
  public String getBlockhash() {
    return blockhash;
  }
  public void setBlockhash(String blockhash) {
    this.blockhash = blockhash;
  }

  /**
   * The index of the transaction in the block that includes it
   **/
  @ApiModelProperty(value = "The index of the transaction in the block that includes it")
  public Long getBlockindex() {
    return blockindex;
  }
  public void setBlockindex(Long blockindex) {
    this.blockindex = blockindex;
  }

  /**
   * The time in seconds since epoch (1 Jan 1970 GMT)
   **/
  @ApiModelProperty(value = "The time in seconds since epoch (1 Jan 1970 GMT)")
  public Integer getBlocktime() {
    return blocktime;
  }
  public void setBlocktime(Integer blocktime) {
    this.blocktime = blocktime;
  }

  /**
   * The transaction id
   **/
  @ApiModelProperty(value = "The transaction id")
  public String getTxid() {
    return txid;
  }
  public void setTxid(String txid) {
    this.txid = txid;
  }

  /**
   * The transaction hash
   **/
  @ApiModelProperty(value = "The transaction hash")
  public String getTxhash() {
    return txhash;
  }
  public void setTxhash(String txhash) {
    this.txhash = txhash;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getVersion() {
    return version;
  }
  public void setVersion(Integer version) {
    this.version = version;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getSize() {
    return size;
  }
  public void setSize(Integer size) {
    this.size = size;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getVsize() {
    return vsize;
  }
  public void setVsize(Integer vsize) {
    this.vsize = vsize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getLocktime() {
    return locktime;
  }
  public void setLocktime(Integer locktime) {
    this.locktime = locktime;
  }

  /**
   * The transaction time in seconds since epoch (1 Jan 1970 GMT)
   **/
  @ApiModelProperty(value = "The transaction time in seconds since epoch (1 Jan 1970 GMT)")
  public Integer getTime() {
    return time;
  }
  public void setTime(Integer time) {
    this.time = time;
  }

  /**
   * The time received in seconds since epoch (1 Jan 1970 GMT)
   **/
  @ApiModelProperty(value = "The time received in seconds since epoch (1 Jan 1970 GMT)")
  public Integer getTimereceived() {
    return timereceived;
  }
  public void setTimereceived(Integer timereceived) {
    this.timereceived = timereceived;
  }

  /**
   * Whether this transaction could be replaced due to BIP125 (replace-by-fee); may be unknown for unconfirmed transactions not in the mempool
   **/
  @ApiModelProperty(value = "Whether this transaction could be replaced due to BIP125 (replace-by-fee); may be unknown for unconfirmed transactions not in the mempool")
  public Bip125ReplaceableEnum getBip125Replaceable() {
    return bip125Replaceable;
  }
  public void setBip125Replaceable(Bip125ReplaceableEnum bip125Replaceable) {
    this.bip125Replaceable = bip125Replaceable;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return (this.amount == null ? transaction.amount == null : this.amount.equals(transaction.amount)) &&
        (this.fee == null ? transaction.fee == null : this.fee.equals(transaction.fee)) &&
        (this.confirmations == null ? transaction.confirmations == null : this.confirmations.equals(transaction.confirmations)) &&
        (this.blockhash == null ? transaction.blockhash == null : this.blockhash.equals(transaction.blockhash)) &&
        (this.blockindex == null ? transaction.blockindex == null : this.blockindex.equals(transaction.blockindex)) &&
        (this.blocktime == null ? transaction.blocktime == null : this.blocktime.equals(transaction.blocktime)) &&
        (this.txid == null ? transaction.txid == null : this.txid.equals(transaction.txid)) &&
        (this.txhash == null ? transaction.txhash == null : this.txhash.equals(transaction.txhash)) &&
        (this.version == null ? transaction.version == null : this.version.equals(transaction.version)) &&
        (this.size == null ? transaction.size == null : this.size.equals(transaction.size)) &&
        (this.vsize == null ? transaction.vsize == null : this.vsize.equals(transaction.vsize)) &&
        (this.locktime == null ? transaction.locktime == null : this.locktime.equals(transaction.locktime)) &&
        (this.time == null ? transaction.time == null : this.time.equals(transaction.time)) &&
        (this.timereceived == null ? transaction.timereceived == null : this.timereceived.equals(transaction.timereceived)) &&
        (this.bip125Replaceable == null ? transaction.bip125Replaceable == null : this.bip125Replaceable.equals(transaction.bip125Replaceable));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.amount == null ? 0: this.amount.hashCode());
    result = 31 * result + (this.fee == null ? 0: this.fee.hashCode());
    result = 31 * result + (this.confirmations == null ? 0: this.confirmations.hashCode());
    result = 31 * result + (this.blockhash == null ? 0: this.blockhash.hashCode());
    result = 31 * result + (this.blockindex == null ? 0: this.blockindex.hashCode());
    result = 31 * result + (this.blocktime == null ? 0: this.blocktime.hashCode());
    result = 31 * result + (this.txid == null ? 0: this.txid.hashCode());
    result = 31 * result + (this.txhash == null ? 0: this.txhash.hashCode());
    result = 31 * result + (this.version == null ? 0: this.version.hashCode());
    result = 31 * result + (this.size == null ? 0: this.size.hashCode());
    result = 31 * result + (this.vsize == null ? 0: this.vsize.hashCode());
    result = 31 * result + (this.locktime == null ? 0: this.locktime.hashCode());
    result = 31 * result + (this.time == null ? 0: this.time.hashCode());
    result = 31 * result + (this.timereceived == null ? 0: this.timereceived.hashCode());
    result = 31 * result + (this.bip125Replaceable == null ? 0: this.bip125Replaceable.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    
    sb.append("  amount: ").append(amount).append("\n");
    sb.append("  fee: ").append(fee).append("\n");
    sb.append("  confirmations: ").append(confirmations).append("\n");
    sb.append("  blockhash: ").append(blockhash).append("\n");
    sb.append("  blockindex: ").append(blockindex).append("\n");
    sb.append("  blocktime: ").append(blocktime).append("\n");
    sb.append("  txid: ").append(txid).append("\n");
    sb.append("  txhash: ").append(txhash).append("\n");
    sb.append("  version: ").append(version).append("\n");
    sb.append("  size: ").append(size).append("\n");
    sb.append("  vsize: ").append(vsize).append("\n");
    sb.append("  locktime: ").append(locktime).append("\n");
    sb.append("  time: ").append(time).append("\n");
    sb.append("  timereceived: ").append(timereceived).append("\n");
    sb.append("  bip125Replaceable: ").append(bip125Replaceable).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
