/**
 * Bitcoind
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.Transaction;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Block {
  
  @SerializedName("hash")
  private String hash = null;
  @SerializedName("confirmations")
  private Long confirmations = null;
  @SerializedName("strippedsize")
  private Long strippedsize = null;
  @SerializedName("size")
  private Long size = null;
  @SerializedName("weight")
  private Long weight = null;
  @SerializedName("height")
  private Long height = null;
  @SerializedName("version")
  private Long version = null;
  @SerializedName("versionHex")
  private String versionHex = null;
  @SerializedName("merkleroot")
  private String merkleroot = null;
  @SerializedName("tx")
  private List<Transaction> tx = null;
  @SerializedName("time")
  private Integer time = null;
  @SerializedName("mediantime")
  private Integer mediantime = null;
  @SerializedName("nonce")
  private Integer nonce = null;
  @SerializedName("bits")
  private String bits = null;
  @SerializedName("difficulty")
  private Float difficulty = null;
  @SerializedName("chainwork")
  private String chainwork = null;

  /**
   * The block hash
   **/
  @ApiModelProperty(value = "The block hash")
  public String getHash() {
    return hash;
  }
  public void setHash(String hash) {
    this.hash = hash;
  }

  /**
   * The number of confirmations
   **/
  @ApiModelProperty(value = "The number of confirmations")
  public Long getConfirmations() {
    return confirmations;
  }
  public void setConfirmations(Long confirmations) {
    this.confirmations = confirmations;
  }

  /**
   * The block stripped size
   **/
  @ApiModelProperty(value = "The block stripped size")
  public Long getStrippedsize() {
    return strippedsize;
  }
  public void setStrippedsize(Long strippedsize) {
    this.strippedsize = strippedsize;
  }

  /**
   * The block size
   **/
  @ApiModelProperty(value = "The block size")
  public Long getSize() {
    return size;
  }
  public void setSize(Long size) {
    this.size = size;
  }

  /**
   * The block weight
   **/
  @ApiModelProperty(value = "The block weight")
  public Long getWeight() {
    return weight;
  }
  public void setWeight(Long weight) {
    this.weight = weight;
  }

  /**
   * The block height (or index)
   **/
  @ApiModelProperty(value = "The block height (or index)")
  public Long getHeight() {
    return height;
  }
  public void setHeight(Long height) {
    this.height = height;
  }

  /**
   * The block version
   **/
  @ApiModelProperty(value = "The block version")
  public Long getVersion() {
    return version;
  }
  public void setVersion(Long version) {
    this.version = version;
  }

  /**
   * The block version (in hex)
   **/
  @ApiModelProperty(value = "The block version (in hex)")
  public String getVersionHex() {
    return versionHex;
  }
  public void setVersionHex(String versionHex) {
    this.versionHex = versionHex;
  }

  /**
   * The block merkle root
   **/
  @ApiModelProperty(value = "The block merkle root")
  public String getMerkleroot() {
    return merkleroot;
  }
  public void setMerkleroot(String merkleroot) {
    this.merkleroot = merkleroot;
  }

  /**
   * The list of transactions in the block
   **/
  @ApiModelProperty(value = "The list of transactions in the block")
  public List<Transaction> getTx() {
    return tx;
  }
  public void setTx(List<Transaction> tx) {
    this.tx = tx;
  }

  /**
   * The block time
   **/
  @ApiModelProperty(value = "The block time")
  public Integer getTime() {
    return time;
  }
  public void setTime(Integer time) {
    this.time = time;
  }

  /**
   * The block median time
   **/
  @ApiModelProperty(value = "The block median time")
  public Integer getMediantime() {
    return mediantime;
  }
  public void setMediantime(Integer mediantime) {
    this.mediantime = mediantime;
  }

  /**
   * The block nonce
   **/
  @ApiModelProperty(value = "The block nonce")
  public Integer getNonce() {
    return nonce;
  }
  public void setNonce(Integer nonce) {
    this.nonce = nonce;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getBits() {
    return bits;
  }
  public void setBits(String bits) {
    this.bits = bits;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Float getDifficulty() {
    return difficulty;
  }
  public void setDifficulty(Float difficulty) {
    this.difficulty = difficulty;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getChainwork() {
    return chainwork;
  }
  public void setChainwork(String chainwork) {
    this.chainwork = chainwork;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Block block = (Block) o;
    return (this.hash == null ? block.hash == null : this.hash.equals(block.hash)) &&
        (this.confirmations == null ? block.confirmations == null : this.confirmations.equals(block.confirmations)) &&
        (this.strippedsize == null ? block.strippedsize == null : this.strippedsize.equals(block.strippedsize)) &&
        (this.size == null ? block.size == null : this.size.equals(block.size)) &&
        (this.weight == null ? block.weight == null : this.weight.equals(block.weight)) &&
        (this.height == null ? block.height == null : this.height.equals(block.height)) &&
        (this.version == null ? block.version == null : this.version.equals(block.version)) &&
        (this.versionHex == null ? block.versionHex == null : this.versionHex.equals(block.versionHex)) &&
        (this.merkleroot == null ? block.merkleroot == null : this.merkleroot.equals(block.merkleroot)) &&
        (this.tx == null ? block.tx == null : this.tx.equals(block.tx)) &&
        (this.time == null ? block.time == null : this.time.equals(block.time)) &&
        (this.mediantime == null ? block.mediantime == null : this.mediantime.equals(block.mediantime)) &&
        (this.nonce == null ? block.nonce == null : this.nonce.equals(block.nonce)) &&
        (this.bits == null ? block.bits == null : this.bits.equals(block.bits)) &&
        (this.difficulty == null ? block.difficulty == null : this.difficulty.equals(block.difficulty)) &&
        (this.chainwork == null ? block.chainwork == null : this.chainwork.equals(block.chainwork));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.hash == null ? 0: this.hash.hashCode());
    result = 31 * result + (this.confirmations == null ? 0: this.confirmations.hashCode());
    result = 31 * result + (this.strippedsize == null ? 0: this.strippedsize.hashCode());
    result = 31 * result + (this.size == null ? 0: this.size.hashCode());
    result = 31 * result + (this.weight == null ? 0: this.weight.hashCode());
    result = 31 * result + (this.height == null ? 0: this.height.hashCode());
    result = 31 * result + (this.version == null ? 0: this.version.hashCode());
    result = 31 * result + (this.versionHex == null ? 0: this.versionHex.hashCode());
    result = 31 * result + (this.merkleroot == null ? 0: this.merkleroot.hashCode());
    result = 31 * result + (this.tx == null ? 0: this.tx.hashCode());
    result = 31 * result + (this.time == null ? 0: this.time.hashCode());
    result = 31 * result + (this.mediantime == null ? 0: this.mediantime.hashCode());
    result = 31 * result + (this.nonce == null ? 0: this.nonce.hashCode());
    result = 31 * result + (this.bits == null ? 0: this.bits.hashCode());
    result = 31 * result + (this.difficulty == null ? 0: this.difficulty.hashCode());
    result = 31 * result + (this.chainwork == null ? 0: this.chainwork.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Block {\n");
    
    sb.append("  hash: ").append(hash).append("\n");
    sb.append("  confirmations: ").append(confirmations).append("\n");
    sb.append("  strippedsize: ").append(strippedsize).append("\n");
    sb.append("  size: ").append(size).append("\n");
    sb.append("  weight: ").append(weight).append("\n");
    sb.append("  height: ").append(height).append("\n");
    sb.append("  version: ").append(version).append("\n");
    sb.append("  versionHex: ").append(versionHex).append("\n");
    sb.append("  merkleroot: ").append(merkleroot).append("\n");
    sb.append("  tx: ").append(tx).append("\n");
    sb.append("  time: ").append(time).append("\n");
    sb.append("  mediantime: ").append(mediantime).append("\n");
    sb.append("  nonce: ").append(nonce).append("\n");
    sb.append("  bits: ").append(bits).append("\n");
    sb.append("  difficulty: ").append(difficulty).append("\n");
    sb.append("  chainwork: ").append(chainwork).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
